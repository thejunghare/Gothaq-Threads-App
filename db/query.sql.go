// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const getPostAndReturnId = `-- name: GetPostAndReturnId :one
SELECT id, thread_id, author_id, created_at, updated_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPostAndReturnId(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPostAndReturnId, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getThreadAndReturnId = `-- name: GetThreadAndReturnId :one
SELECT id, title, author_id, created_at, updated_at FROM threads
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetThreadAndReturnId(ctx context.Context, id int64) (Thread, error) {
	row := q.db.QueryRow(ctx, getThreadAndReturnId, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAndReturnId = `-- name: GetUserAndReturnId :one
SELECT id, username, password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAndReturnId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserAndReturnId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
